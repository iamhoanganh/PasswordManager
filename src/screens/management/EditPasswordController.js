import React, { useContext, useEffect, useState } from "react";
import { Alert, Platform, Text, View } from "react-native";
import { db } from "../../FirebaseConfig";
import { updateDoc, setDoc, doc, getDoc } from "firebase/firestore";
import { serverTimestamp } from "firebase/firestore";

import SettingsContext from "../../contexts/SettingsContext";
import CryptoES from "crypto-es";
import PasswordGeneration from "../../models/PasswordGeneration";
import Style from "../../styles/Style";
import { KeyboardAwareScrollView } from "react-native-keyboard-aware-scroll-view";
import {
  Button,
  Card,
  Dialog,
  Portal,
  Snackbar,
  TextInput,
} from "react-native-paper";
import { TextInputBox } from "../../components/TextInputBox";
import { ClickableButton } from "../../components/ClickableButton";
import { LengthSlider } from "../../components/LengthSlider";
import { ToggleSwitch } from "../../components/ToggleSwitch";

/**
 * Controller Method for the Edit Password Screen
 * @param props application props
 * @returns {JSX.Element} edit password screen render
 */

export default function EditPasswordController(props) {
  const [passwordEntryName, setPasswordEntryName] = useState("");
  const [usernameText, setUsernameText] = useState("");
  const [passwordText, setPasswordText] = useState("");
  const [selectedColour, setSelectedColour] = useState("#002366");
  const [passphrase, setPassphrase] = useState("");

  const [passwordVisibility, setPasswordVisibility] = useState(true);

  // Settings context
  const settingsContext = useContext(SettingsContext);

  const [upperEnabled, setUpperEnabled] = useState(
    settingsContext.includeUppercase
  );
  const toggleUpperSwitch = () =>
    setUpperEnabled((previousState) => !previousState);

  const [lowerEnabled, setLowerEnabled] = useState(
    settingsContext.includeLowercase
  );
  const toggleLowerSwitch = () =>
    setLowerEnabled((previousState) => !previousState);

  const [numbersEnabled, setNumbersEnabled] = useState(
    settingsContext.includeNumbers
  );
  const toggleNumberSwitch = () =>
    setNumbersEnabled((previousState) => !previousState);

  const [symbolsEnabled, setSymbolsEnabled] = useState(
    settingsContext.includeSymbols
  );
  const toggleSymbolSwitch = () =>
    setSymbolsEnabled((previousState) => !previousState);

  const [passwordLength, setPasswordLength] = useState(
    settingsContext.passwordLength
  );

  const [autoGenerateOptionsVisible, setAutoGenerateOptionsVisible] =
    React.useState(false);

  const showAutoGeneratedOptionsDialog = () =>
    setAutoGenerateOptionsVisible(true);

  const hideAutoGeneratedOptionsDialog = () =>
    setAutoGenerateOptionsVisible(false);

  const [snackbarVisible, setSnackbarVisible] = React.useState(false);

  const onToggleSnackBar = () => setSnackbarVisible(!snackbarVisible);

  const [visible, setVisible] = React.useState(false);

  const hideDialog = () => setVisible(false);

  const onDismissSnackBar = () => setSnackbarVisible(false);

  const returnScreen = () => {
    // Check that at least one character set is enabled
    if (upperEnabled || lowerEnabled || numbersEnabled || symbolsEnabled) {
      // Set password length
      settingsContext.passwordLength = passwordLength;

      // Set selected character sets
      settingsContext.includeUppercase = upperEnabled;
      settingsContext.includeLowercase = lowerEnabled;
      settingsContext.includeNumbers = numbersEnabled;
      settingsContext.includeSymbols = symbolsEnabled;
      setAutoGenerateOptionsVisible(false);
    } else {
      onToggleSnackBar();
    }
  };

  // user and entity information
  const { userId, entityId } = props.route.params;
  const userID = userId;
  const entityID = entityId;

  /**
   * When entering this page, populate the information states using the firestore database
   */
  useEffect(() => {
    let pPhrase;

    getDoc(doc(db, "users", userID)).then((snapshot) => {
      // Set decryption passphrase
      let data = snapshot.data();
      pPhrase = data.passphrase;
      setPassphrase(data.passphrase.toString());
    }, []);

    // Get password information for the entity which has been passed in

    getDoc(doc(db, `users/${userID}/passwords`, entityID)).then((snapshot) => {
      let data = snapshot.data();
      // decrypt username/email address and password text
      let decryptedPasswordText = CryptoES.AES.decrypt(data.password, pPhrase);
      let decryptedUsernameText = CryptoES.AES.decrypt(data.userEmail, pPhrase);
      // Set entry name
      setPasswordEntryName(data.name);
      // Set username/email address and password to the decrypted text
      setUsernameText(decryptedUsernameText.toString(CryptoES.enc.Utf8));
      setPasswordText(decryptedPasswordText.toString(CryptoES.enc.Utf8));
      // Set accent colour in the colour picker
      setSelectedColour(data.accent);
    }, []);
  }, []);

  /**
   * When the generate button is pressed, then call the password generation model.
   * SettingsContext is used to pass in the generation parameters here. This can be modified in the Generation Options screen.
   */
  const handleGeneratePassword = () => {
    PasswordGeneration(
      settingsContext.includeUppercase,
      settingsContext.includeLowercase,
      settingsContext.includeNumbers,
      settingsContext.includeSymbols,
      settingsContext.passwordLength,
      setPasswordText
    );
  };

  /**
   * When the add button is pressed, then encrypt the information and update the firebase database
   */
  const onAddButtonPress = () => {
    if (
      passwordEntryName.length > 0 &&
      usernameText.length > 0 &&
      passwordText.length > 0
    ) {
      // encrypt username and password text using the encryption/decryption key we passed in on initial load
      let encryptedPasswordText = CryptoES.AES.encrypt(
        passwordText,
        passphrase
      );
      let encryptedUsernameText = CryptoES.AES.encrypt(
        usernameText,
        passphrase
      );

      // Individually update values in order to minimise the chance of issues happening when updating the database
      const passwordRef = doc(db, `users/${userID}/passwords`, entityID);

      setDoc(passwordRef, { name: passwordEntryName });
      setDoc(passwordRef, { userEmail: encryptedUsernameText.toString() });
      setDoc(passwordRef, { password: encryptedPasswordText.toString() });
      setDoc(passwordRef, { accent: selectedColour });
      updateDoc(passwordRef, {
        modificationDate: serverTimestamp(),
      });

      // When updating has been completed, then go back to the view password screen
      props.navigation.goBack("ViewPasswordScreen", {
        passwordEntityId: entityID,
        userId: userID,
      });
    } else {
      setVisible(true);
    }
  };

  // Return edit screen render view
  return (
    <View style={Style.container}>
      <KeyboardAwareScrollView
        style={{ flex: 1, width: "100%" }}
        keyboardShouldPersistTaps="always"
      >
        {/* Entity Text Input Fields */}

        <Card
          style={{
            marginTop: 5,
            marginBottom: 5,
            marginHorizontal: 7,
            paddingVertical: 10,
            backgroundColor: selectedColour,
          }}
        >
          <Card
            style={{
              marginVertical: 10,
              marginHorizontal: 15,
              paddingVertical: 10,
            }}
          >
            <TextInputBox
              placeholder={"Tên"}
              textSetter={setPasswordEntryName}
              value={passwordEntryName}
            />
            <TextInputBox
              placeholder={"Tài khoản / Email"}
              textSetter={setUsernameText}
              value={usernameText}
            />
            <TextInputBox
              placeholder={"Mật khẩu"}
              textSetter={setPasswordText}
              value={passwordText}
            />

            <View
              style={{
                justifyContent: "center",
                paddingHorizontal: 10,
                marginVertical: 10,
              }}
            ></View>
          </Card>
        </Card>

        <ClickableButton
          buttonText={"Sinh mật khẩu tự động"}
          onPressMethod={handleGeneratePassword}
        />
        <ClickableButton
          buttonText={"Tuỳ chọn"}
          onPressMethod={showAutoGeneratedOptionsDialog}
        />
        <ClickableButton
          buttonText={"Cập nhật"}
          onPressMethod={onAddButtonPress}
        />
      </KeyboardAwareScrollView>
      <Portal>
        <Dialog
          dismissable={false}
          visible={autoGenerateOptionsVisible}
          onDismiss={hideAutoGeneratedOptionsDialog}
        >
          <Dialog.Title>Tuỳ chọn sinh khoá</Dialog.Title>
          <Dialog.Content>
            <Text style={Style.text}>Độ dài mật khẩu</Text>
            <Text style={Style.passwordLengthText}>{passwordLength}</Text>
            <LengthSlider value={passwordLength} setter={setPasswordLength} />
            <ToggleSwitch
              text={"Ký tự in hoa"}
              enabledStatus={upperEnabled}
              switchValue={toggleUpperSwitch}
            />
            <ToggleSwitch
              text={"Ký tự thường"}
              enabledStatus={lowerEnabled}
              switchValue={toggleLowerSwitch}
            />
            <ToggleSwitch
              text={"Số"}
              enabledStatus={numbersEnabled}
              switchValue={toggleNumberSwitch}
            />
            <ToggleSwitch
              text={"Ký tự đặc biệt"}
              enabledStatus={symbolsEnabled}
              switchValue={toggleSymbolSwitch}
            />
          </Dialog.Content>
          <Dialog.Actions>
            <Button onPress={returnScreen}>Chấp nhận</Button>
          </Dialog.Actions>
        </Dialog>
      </Portal>
      <Portal>
        <Dialog dismissable={false} visible={visible} onDismiss={hideDialog}>
          <Dialog.Icon icon="alert" />
          <Dialog.Title style={Style.title}>Không thành công</Dialog.Title>
          <Dialog.Content>
            <Text variant="bodyMedium">
              Hãy chắc chắn nhập tên, tài khoản hoặc email và mật khẩu rồi nhé!
            </Text>
          </Dialog.Content>
          <Dialog.Actions>
            <Button onPress={hideDialog}>Okay</Button>
          </Dialog.Actions>
        </Dialog>
      </Portal>
      <Snackbar visible={snackbarVisible} onDismiss={onDismissSnackBar}>
        Không có loại ký tự nào được chọn. Để tạo mật khẩu hoạt động, phải chọn
        ít nhất một loại ký tự.
      </Snackbar>
    </View>
  );
}
